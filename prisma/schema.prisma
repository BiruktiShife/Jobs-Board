generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id               String           @id @default(cuid())
  title            String
  logo             String
  area             String
  location         String
  deadline         DateTime
  site             EmploymentType
  about_job        String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  companyId        String
  applications     Application[]
  bookmarks        Bookmark[]
  company          Company          @relation(fields: [companyId], references: [id])
  qualifications   Qualification[]
  responsibilities Responsibility[]
  requiredSkills   Skill[]
}

model Qualification {
  id    Int    @id @default(autoincrement())
  value String
  jobId String
  job   Job    @relation(fields: [jobId], references: [id])
}

model Responsibility {
  id    Int    @id @default(autoincrement())
  value String
  jobId String
  job   Job    @relation(fields: [jobId], references: [id])
}

model Skill {
  id    Int    @id @default(autoincrement())
  value String
  jobId String
  job   Job    @relation(fields: [jobId], references: [id])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  role          Role          @default(JOB_SEEKER)
  companyId     String?
  createdAt     DateTime      @default(now())
  emailVerified DateTime?
  image         String?
  phone         String?
  studyArea     String[]
  accounts      Account[]
  applications  Application[]
  bookmarks     Bookmark[]
  adminCompany  Company?      @relation("CompanyAdmin")
  sessions      Session[]
  company       Company?      @relation("CompanyUsers", fields: [companyId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  adminId   String?  @unique
  createdAt DateTime @default(now())
  about     String?
  logo      String?
  userId    String?  @unique
  admin     User?    @relation("CompanyAdmin", fields: [adminId], references: [id])
  jobs      Job[]
  users     User[]   @relation("CompanyUsers")
}

model Application {
  id             String   @id @default(cuid())
  jobId          String
  userId         String
  fullName       String
  yearOfBirth    Int
  email          String
  address        String
  phone          String
  portfolio      String?
  profession     String
  careerLevel    String
  coverLetter    String
  experiences    Json
  degreeType     String
  institution    String
  graduationDate DateTime
  skills         String[]
  certifications String[]
  languages      String[]
  projects       String?
  volunteerWork  String?
  resumeUrl      String?
  createdAt      DateTime @default(now())
  status         String?  @default("Pending")
  job            Job      @relation(fields: [jobId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
}

enum EmploymentType {
  Full_time
  Part_time
  Freelance
}

enum Role {
  ADMIN
  JOB_SEEKER
  COMPANY_ADMIN
}
