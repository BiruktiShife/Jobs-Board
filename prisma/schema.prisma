generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id              String   @id @default(cuid())
  title            String
  companyId        String
  company          Company          @relation(fields: [companyId], references: [id])
  logo             String
  area             String
  location         String
  deadline         DateTime
  site             EmploymentType
  about_job        String
  qualifications   Qualification[]
  responsibilities Responsibility[]
  requiredSkills   Skill[]
 applications Application[] 
  bookmarks Bookmark[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
}

model Qualification {
  id    Int    @id @default(autoincrement())
  value String
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model Responsibility {
  id    Int    @id @default(autoincrement())
  value String
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model Skill {
  id    Int    @id @default(autoincrement())
  value String
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

enum EmploymentType {
  Full_time
  Part_time
  Freelance
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   
  emailVerified DateTime? 
  image         String?   
  role          Role      @default(JOB_SEEKER)
  companyId     String?
  company       Company?  @relation(name: "CompanyUsers", fields: [companyId], references: [id])
  adminCompany  Company?  @relation(name: "CompanyAdmin")
  createdAt     DateTime  @default(now())
  accounts      Account[] 
  sessions      Session[] 
  bookmarks Bookmark[]
  applications Application[]
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Company {
  id        String   @id @default(cuid())
  name        String   @unique
  logo        String?  
  about       String?
  adminId   String?   @unique
  admin     User?     @relation(name: "CompanyAdmin", fields: [adminId], references: [id])
  users     User[]   @relation(name: "CompanyUsers")
  jobs      Job[]
  createdAt DateTime @default(now())
}

model Application {
  id             String   @id @default(cuid())
  jobId          String
  job            Job      @relation(fields: [jobId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  fullName       String
  yearOfBirth    Int
  email          String
  address        String
  phone          String
  portfolio      String?
  profession     String
  careerLevel    String
  coverLetter    String
  experiences    Json 
  degreeType     String
  institution    String
  graduationDate DateTime
  skills         String[] 
  certifications String[] 
  languages      String[] 
  projects       String?
  volunteerWork  String?
  resumeUrl      String? 
  createdAt      DateTime @default(now())
  status         String?  @default("Pending")
}
model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  jobId     String      
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  @@unique([userId, jobId])
}

enum Role {
  ADMIN
  JOB_SEEKER
  COMPANY_ADMIN   
}